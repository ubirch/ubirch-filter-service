core {

  connector {

    hosts = 127.0.0.1
    port = 8182

    connectionPool {
      reconnectInterval = 500
      maxWaitForConnection = 6000
    }

    serializer {
      className = org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0
      config {
        ioRegistries = [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry]
      }
    }


  }
}

kafkaApi {

  kafkaConsumer {
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = "localhost:9092"
    // subscribe to topic "test" for... testing purposes
    topic = "json.to.sign"
    //If empty, a group id will be created.
    groupId = "my group id"
    // gracefulTimeout = 2 //In Seconds
    errorTopic = "com.ubirch.filter.error"
    gracefulTimeout = 2
    maxPoolRecords = 500
  }

  kafkaProducer {
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = "localhost:9092"
    errorTopic = "com.ubirch.filter.error"
    rejectionTopic = "com.ubirch.filter.rejection"
    topic = "com.ubirch.eventlog.encoder"
    gracefulTimeout = 2
  }

  metrics {
    prometheus {
      port = 4321
    }
  }

}

ubirch {
  lockutil {
    redis {
      host = "localhost"
      port = 6379
      password = ""
      usecluster = false
      cacheName = "UPP-hashes"
    }
  }

  environment = "dev"
}