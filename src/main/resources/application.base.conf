
filterService {

  stateActive = true

  kafkaApi {

    kafkaConsumer {
      //colon-separated values of IP/Hostname and ports
      bootstrapServers = "localhost:9092"
      // Todo: should I do this as well: "subscribe to topic "test" for... testing purposes"?
      topic = "consumer.topic"
      //If empty, a group id will be created.
      groupId = "my group id"
      // gracefulTimeout = 2 //In Seconds
      errorTopic = "com.ubirch.filter.error"
      gracefulTimeout = 1
      maxPoolRecords = 500

      reconnectBackoffMsConfig = 50
      reconnectBackoffMaxMsConfig = 1000
    }

    kafkaProducer {
      //colon-separated values of IP/Hostname and ports
      lingerMS = 1000
      bootstrapServers = "localhost:9092"
      errorTopic = "producer.error" //error and rejection have same topic name as for the moment they communicate to the same topic
      rejectionTopic = "producer.error"
      forwardTopic = "producer.forward"
      gracefulTimeout = 2
    }

  }

  metrics {
    prometheus {
      port = 4321
      namespace = "ubirch_filter_service"
    }
  }

  redis {
    host = "localhost"
    port = 6379
    password = ""
    useReplicated = false
    cacheName = "hashes_payload"
  }

  verification {
    environment = "dev"
  }

  threads = 10
// TODO: RESTORE: uncomment this
//  cassandra {
//    cluster {
//      keyspace: "event_log"
//      preparedStatementCacheSize: 1000
//      //Comma-separeted values of IP/Hostname and ports
//      contactPoints: "localhost:9042"
//      //ANY, ONE, TWO, THREE, QUORUM, ALL, LOCAL_QUORUM, EACH_QUORUM, SERIAL, LOCAL_SERIAL, LOCAL_ONE
//      consistencyLevel = "LOCAL_ONE"
//      serialConsistencyLevel = "SERIAL"
//      withSSL: false
//      username: ""
//      password: ""
//    }
//  }
}
