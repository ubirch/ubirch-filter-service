include "application.base.conf"

filterService {

  stateActive = ${FILTER_ENV_STATE_ACTIVE}

  kafkaApi {

    kafkaConsumer {
      //colon-separated values of IP/Hostname and ports
      bootstrapServers = ${FILTER_ENV_KAFKA_CONS_BOOTSTRAP}
      // subscribe to topic "test" for... testing purposes
      topic = ${FILTER_ENV_KAFKA_CONS_TOPIC}
      //If empty, a group id will be created.
      groupId = ${FILTER_ENV_KAFKA_CONS_GROUPID}
      errorTopic = ${FILTER_ENV_KAFKA_CONS_ERRORTOPIC}
      gracefulTimeout = ${FILTER_ENV_KAFKA_CONS_TIMEOUT}
      maxPoolRecords = ${FILTER_ENV_KAFKA_CONS_POOLREC}
    }

    kafkaProducer {
      //colon-separated values of IP/Hostname and ports
      bootstrapServers = ${FILTER_ENV_KAFKA_PROD_BOOTSTRAP}
      errorTopic = ${FILTER_ENV_KAFKA_PROD_ERRORTOPIC}
      rejectionTopic = ${FILTER_ENV_KAFKA_PROD_REJECTIONTOPIC}
      topic = ${FILTER_ENV_KAFKA_PROD_TOPIC}
      gracefulTimeout = ${FILTER_ENV_KAFKA_PROD_TIMEOUT}

    }
  }

  metrics {
    prometheus {
      port = ${FILTER_ENV_METRICS_PROMETHEUS_PORT}
    }
  }

  redis {
    mainHost = ${FILTER_ENV_REDIS_MAIN_HOST}
    replicatedHost = ${FILTER_ENV_REDIS_REPLICATED_HOST}
    port = ${FILTER_ENV_REDIS_PORT}
    password = ${FILTER_ENV_REDIS_PW}
    useReplicated = ${FILTER_ENV_REDIS_USEREPLICATED}
    cacheName = ${FILTER_ENV_REDIS_NAME}
  }

  verification {
    environment = ${FILTER_ENV_VERIFICATION_ENV}
  }

  cassandra {

    cluster {

      keyspace= ${FILTER_ENV_CS_KEYSPACE}
      preparedStatementCacheSize= ${FILTER_ENV_CS_PREPSTM_CACHE}
      //Comma-separeted values of IP/Hostname and ports
      contactPoints = ${FILTER_ENV_CS_NODES}
      //ANY, ONE, TWO, THREE, QUORUM, ALL, LOCAL_QUORUM, EACH_QUORUM, SERIAL, LOCAL_SERIAL, LOCAL_ONE
      consistencyLevel = ${FILTER_ENV_CS_CONSISTENCY_LEVEL}
      serialConsistencyLevel = ${FILTER_ENV_CS_SERIAL_CONSISTENCY_LEVEL}
      withSSL = ${FILTER_ENV_CS_WITH_SSL}
      username = ${FILTER_ENV_CS_USERNAME}
      password = ${FILTER_ENV_CS_PASSWORD}

    }

  }

}
